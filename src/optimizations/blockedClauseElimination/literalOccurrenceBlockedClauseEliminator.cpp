#include "optimizations/blockedClauseElimination/literalOccurrenceBlockedClauseEliminator.hpp"

using namespace blockedClauseElimination;

bool LiteralOccurrenceBlockedClauseEliminator::doesEveryClauseInResolutionEnvironmentFullfillLiteralBlockedCondition(const dimacs::ProblemDefinition::Clause& clauseToCheck, long potentiallyBlockingLiteral) const
{
	const dimacs::LiteralOccurrenceLookup::LiteralOccurrenceLookupEntry* overlappingClausesForLiteral = problemDefinition->getLiteralOccurrenceLookup()[-potentiallyBlockingLiteral].value_or(nullptr);
	return overlappingClausesForLiteral && doesEveryClauseInGenericResolutionEnvironmentContainerFullfillLiteralBlockedCondition(clauseToCheck, potentiallyBlockingLiteral, *overlappingClausesForLiteral);
}
